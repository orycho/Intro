========================================================================
    CONSOLE APPLICATION : Intro Project Overview
========================================================================

AppWizard has created this Intro application for you.

This file contains a summary of what you will find in each of the files that
make up your Intro application.


Intro.vcproj
    This is the main project file for VC++ projects generated using an Application Wizard.
    It contains information about the version of Visual C++ that generated the file, and
    information about the platforms, configurations, and project features selected with the
    Application Wizard.

Intro.cxx
    This is the main application source file.

Intro.h
    This file defines the abtracts AST Nodes, and some others.
/////////////////////////////////////////////////////////////////////////////
Other standard files:

StdAfx.h, StdAfx.cpp
    These files are used to build a precompiled header (PCH) file
    named Intro.pch and a precompiled types file named StdAfx.obj.

BasicTesting.cxx
    A number of testcases for isual inspection, very helpfull
    during development.

city.h, city.cxx
    Google's reference implenentation of city-hash,
    this was the easiest way to include it in the project.

CodeGen.cxx, CodeGen.h
    This file contains all codeGen members for all Statements and Expressions.
    The generated code is LLVM IR.

CodeGenEnvironment.cxx, CodeGenEnvironment.h
    Environments represent scopes and their contents,
    this one is used during code generation.
    Also manages data used during the generation of a function
    or generator.

Environment.cxx, Environment.h
    Environments represent scopes and their contents,
    this one is used furing type inference.

Expression.cxx, Expression.h
    Implements non-codegen for most expressions.
    Expressions are nodes of the AST, they produce values.

Generator.h
    Generators are statements that represent iterations

JIT.h
    Basic implementation of a JIT compiler based on LLVM

Module.h
    Module implemenation for use during parsing and type inference.

Parser.cpp, Parser.h
    Autogenerated by COCO/R from ../intro.atg and ../coco/parser.frame

PerfHash.cxx, PerfHash.h
    Implementation of a simple perfect hashing alrgorithm.
    Used to pack labels for records and variants into slots.

ProductList.h
    Not used. Given n vectors, compute all n-tuples that have each value from each
    input vector once.

RTType.h
    Definitions relating to runtime types. May be moved into Runtime.h

Runtime.cxx, Runtime.h
    These files contain the implemenation of the runtime environment,
    providing lists, dictionaries, records, closures, etc for polymorphic
    values. All operations on Intro types not native to LLVM (lists, dictionaries,
    strings, records, variants, ...) are implemented here.

Scanner.cpp, Scanner.h
    Autogenerated by COCO/R from ../intro.atg and ../coco/scanner.frame

Statement.h
    Contains classes for Statement nodes in AST. Statements do not returns
    values, they are mostly flow control and variable definition.

Type.cxx, Type.h
    Contains the class hierary representing the various types known in Intro.

TypeExpression.h
    Classes for AST nodes representing types.

TypeGraph.cxx, TypeGraph.h
    The TypeGraph is initialized to the type hierarchy employed by Intro:
    What is a types supertype, how do parameters mutate to reach that supertype?
    The type graph can tell you.
/////////////////////////////////////////////////////////////////////////////
Other notes:

* There are some doccomments for doxygen throughout the code.
* you need LLVM installed to compile, with the project settings directories
  including the path to the LLVM libs and headers.
/////////////////////////////////////////////////////////////////////////////
